{"version":3,"sources":["compontents/TodoItem.js","compontents/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","react_default","a","createElement","className","this","props","completed","type","defaultChecked","onClick","toggleCompleted","title","deleteTodo","Component","TodoList","_this","filteredTodos","todos","slice","location","filter","todo","map","compontents_TodoItem","key","id","App","state","todosList","search","nextID","length","todosId","event","index","findIndex","newTodoList","setState","splice","handleLoadSearchResults","target","value","clearCompleted","keyHandling","keyCode","newTodo","userId","push","previousState","placeholder","autoFocus","onChange","onKeyDown","compontents_TodoList","hash","href","Boolean","window","hostname","match","routing","BrowserRouter","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.938174d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            defaultChecked={this.props.completed}\n            onClick={this.props.toggleCompleted}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.deleteTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\n\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from \"./TodoItem.js\"\n\n\nclass TodoList extends Component {\n  render() {\n      let filteredTodos = this.props.todos.slice();\n      if(this.props.location === \"#/active\"){filteredTodos = this.props.todos.filter(todo => !todo.completed)}\n      if(this.props.location === \"#/completed\"){filteredTodos = this.props.todos.filter(todo => todo.completed)}\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {filteredTodos.map(todo => (\n            <TodoItem\n              title={todo.title}\n              completed={todo.completed}\n              key={todo.id}\n              toggleCompleted={this.props.toggleCompleted(todo.id)}\n              deleteTodo={this.props.deleteTodo(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport todosList from \"./todos.json\";\nimport TodoList from \"./compontents/TodoList.js\";\n\nclass App extends Component {\n  state = {\n    todos: todosList,\n    search: \"\",\n    nextID: todosList.length + 1\n  };\n\n  toggleCompleted = todosId => event => {\n    let index = this.state.todos.findIndex(todo => todo.id === todosId);\n    let newTodoList = this.state.todos.slice();\n    newTodoList[index].completed = !newTodoList[index].completed;\n    this.setState({ todos: newTodoList });\n  };\n\n  deleteTodo = todosId => event => {\n    let index = this.state.todos.findIndex(todo => todo.id === todosId);\n    let newTodoList = this.state.todos.slice();\n    newTodoList.splice(index, 1);\n    this.setState({ todos: newTodoList });\n  };\n\n  handleLoadSearchResults = event => {\n    this.setState({\n      search: event.target.value\n    });\n  };\n\n  clearCompleted = () => {\n    let newTodoList = this.state.todos.slice();\n    newTodoList = newTodoList.filter(todo => todo.completed === false);\n    this.setState({ todos: newTodoList });\n  };\n\n  keyHandling = event => {\n    if (event.keyCode === 13) {\n      const newTodo = {\n        userId: 1,\n        id: this.state.nextID,\n        title: this.state.search,\n        completed: false\n      };\n      const newTodoList = this.state.todos.slice();\n      newTodoList.push(newTodo);\n      this.setState(previousState => ({\n        todos: newTodoList,\n        search: \"\",\n        nextID: previousState.nextID + 1\n      }));\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleLoadSearchResults}\n            onKeyDown={this.keyHandling}\n          />\n        </header>\n        <TodoList\n          location={this.props.location.hash}\n          todos={this.state.todos}\n          toggleCompleted={this.toggleCompleted}\n          deleteTodo={this.deleteTodo}\n        />\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>{this.state.todos.filter(todo => !todo.completed).length}</strong> item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <a href=\"#/\">All</a>\n            </li>\n            <li>\n              <a href=\"#/active\">Active</a>\n            </li>\n            <li>\n              <a href=\"#/completed\">Completed</a>\n            </li>\n          </ul>\n          <button className=\"clear-completed\" onClick={this.clearCompleted}>Clear completed</button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Router, Route, Link, Switch } from 'react-router-dom'\n\n\nconst routing = (\n    <BrowserRouter>\n        {/* <Switch> */}\n            {/* <Route exact path=\"/active\" render={props=> (<App></App>)}/> */}\n            <Route exact path=\"/\" component={App}/>\n        {/* </Switch> */}\n    </BrowserRouter>\n)\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}